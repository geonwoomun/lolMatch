{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.21f205d9420f3f603846.hot-update.js","sources":["webpack:///./sagas/user.js"],"sourcesContent":["import { all, fork, delay, takeLatest,takeEvery, call, put, take } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { SEARCH_USER_REQUEST, SEARCH_USER_FAILURE, SEARCH_USER_SUCCESS } from '../reducers/user';\r\n\r\nfunction searchUserAPI(userName){\r\n    return axios.get(`/user/${userName}`);\r\n}\r\n\r\nfunction* searchUser(action) {\r\n    try{\r\n        const result = yield call(searchUserAPI, action.data);\r\n        yield put({\r\n            type : SEARCH_USER_SUCCESS,\r\n            data : result.data,\r\n        })\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type: SEARCH_USER_FAILURE,\r\n            error : e\r\n        });\r\n    }\r\n}\r\nfunction* watchSearch(){\r\n    yield takeLatest(SEARCH_USER_REQUEST, searchUser);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([ //call fork는 둘다 함수를 실행해줌. call 동기호출 fork 비동기 호출출\r\n        fork(watchSearch), // 많은 액션들 사이에 순서가 없다. 사용자의 이벤트 클릭에 따라 작동.\r\n        // 순서가 의미가 없으니깐 fork\r\n    ]); // 사용자에 관한 리덕스 액션이 여러개면 all로 묶어서 다 넣어줘야함.\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAQA;;;AAeA;;;AAIA;AACA;AA5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAEA;AAFA;AAGA;AACA;AACA;AAFA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAQA;AARA;AASA;AACA;AACA;AAFA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}