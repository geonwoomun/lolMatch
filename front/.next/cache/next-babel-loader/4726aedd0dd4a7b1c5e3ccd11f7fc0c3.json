{"ast":null,"code":"import { all, fork, delay, takeLatest, takeEvery, call, put, take } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { SEARCH_USER_REQUEST, SEARCH_USER_FAILURE, SEARCH_USER_SUCCESS } from '../reducers/user';\n\nfunction searchUserAPI(userName) {\n  return axios.get(`/user/${userName}`);\n}\n\nfunction* searchUser(action) {\n  try {\n    const result = yield call(searchUserAPI, action.data);\n    yield put({\n      type: SEARCH_USER_SUCCESS,\n      data: result\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SEARCH_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSearch() {\n  yield takeLatest(SEARCH_USER_REQUEST, searchUser);\n}\n\nexport default function* userSaga() {\n  yield all([//call fork는 둘다 함수를 실행해줌. call 동기호출 fork 비동기 호출출\n  fork(watchSearch) // 많은 액션들 사이에 순서가 없다. 사용자의 이벤트 클릭에 따라 작동.\n  // 순서가 의미가 없으니깐 fork\n  ]); // 사용자에 관한 리덕스 액션이 여러개면 all로 묶어서 다 넣어줘야함.\n}","map":{"version":3,"sources":["C:/Users/ansej/공부한것들/lolMatch/front/sagas/user.js"],"names":["all","fork","delay","takeLatest","takeEvery","call","put","take","axios","SEARCH_USER_REQUEST","SEARCH_USER_FAILURE","SEARCH_USER_SUCCESS","searchUserAPI","userName","get","searchUser","action","result","data","type","e","console","error","watchSearch","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,UAA3B,EAAsCC,SAAtC,EAAiDC,IAAjD,EAAuDC,GAAvD,EAA4DC,IAA5D,QAAwE,oBAAxE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,mBAAnD,QAA8E,kBAA9E;;AAEA,SAASC,aAAT,CAAuBC,QAAvB,EAAgC;AAC5B,SAAOL,KAAK,CAACM,GAAN,CAAW,SAAQD,QAAS,EAA5B,CAAP;AACH;;AAED,UAAUE,UAAV,CAAqBC,MAArB,EAA6B;AACzB,MAAG;AACC,UAAMC,MAAM,GAAG,MAAMZ,IAAI,CAACO,aAAD,EAAgBI,MAAM,CAACE,IAAvB,CAAzB;AACA,UAAMZ,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAGR,mBADD;AAENO,MAAAA,IAAI,EAAGD;AAFD,KAAD,CAAT;AAIH,GAND,CAMC,OAAMG,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMd,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAET,mBADA;AAENY,MAAAA,KAAK,EAAGF;AAFF,KAAD,CAAT;AAIH;AACJ;;AACD,UAAUG,WAAV,GAAuB;AACnB,QAAMpB,UAAU,CAACM,mBAAD,EAAsBM,UAAtB,CAAhB;AACH;;AAED,eAAe,UAAUS,QAAV,GAAqB;AAChC,QAAMxB,GAAG,CAAC,CAAE;AACRC,EAAAA,IAAI,CAACsB,WAAD,CADE,CACa;AACnB;AAFM,GAAD,CAAT,CADgC,CAI5B;AACP","sourcesContent":["import { all, fork, delay, takeLatest,takeEvery, call, put, take } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { SEARCH_USER_REQUEST, SEARCH_USER_FAILURE, SEARCH_USER_SUCCESS } from '../reducers/user';\r\n\r\nfunction searchUserAPI(userName){\r\n    return axios.get(`/user/${userName}`);\r\n}\r\n\r\nfunction* searchUser(action) {\r\n    try{\r\n        const result = yield call(searchUserAPI, action.data);\r\n        yield put({\r\n            type : SEARCH_USER_SUCCESS,\r\n            data : result,\r\n        })\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type: SEARCH_USER_FAILURE,\r\n            error : e\r\n        });\r\n    }\r\n}\r\nfunction* watchSearch(){\r\n    yield takeLatest(SEARCH_USER_REQUEST, searchUser);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([ //call fork는 둘다 함수를 실행해줌. call 동기호출 fork 비동기 호출출\r\n        fork(watchSearch), // 많은 액션들 사이에 순서가 없다. 사용자의 이벤트 클릭에 따라 작동.\r\n        // 순서가 의미가 없으니깐 fork\r\n    ]); // 사용자에 관한 리덕스 액션이 여러개면 all로 묶어서 다 넣어줘야함.\r\n}"]},"metadata":{},"sourceType":"module"}