{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(searchUser),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSearch),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, delay, takeLatest, takeEvery, call, put, take } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { SEARCH_USER_REQUEST, SEARCH_USER_FAILURE, SEARCH_USER_SUCCESS } from '../reducers/user';\n\nfunction searchUserAPI(userName) {\n  return axios.get(\"/user/\".concat(userName));\n}\n\nfunction searchUser(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function searchUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(searchUserAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: SEARCH_USER_SUCCESS,\n            data: result\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: SEARCH_USER_FAILURE,\n            error: _context.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchSearch() {\n  return _regeneratorRuntime.wrap(function watchSearch$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          takeLatest(SEARCH_USER_REQUEST, searchUser);\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([//call fork는 둘다 함수를 실행해줌. call 동기호출 fork 비동기 호출출\n          fork(watchSearch) // 많은 액션들 사이에 순서가 없다. 사용자의 이벤트 클릭에 따라 작동.\n          // 순서가 의미가 없으니깐 fork\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/ansej/공부한것들/lolMatch/front/sagas/user.js"],"names":["searchUser","watchSearch","userSaga","all","fork","delay","takeLatest","takeEvery","call","put","take","axios","SEARCH_USER_REQUEST","SEARCH_USER_FAILURE","SEARCH_USER_SUCCESS","searchUserAPI","userName","get","action","data","result","type","console","error"],"mappings":";;;;yBAQUA,U;;;yBAeAC,W;;;yBAIeC,Q;;AA3BzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,UAA3B,EAAsCC,SAAtC,EAAiDC,IAAjD,EAAuDC,GAAvD,EAA4DC,IAA5D,QAAwE,oBAAxE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,mBAAnD,QAA8E,kBAA9E;;AAEA,SAASC,aAAT,CAAuBC,QAAvB,EAAgC;AAC5B,SAAOL,KAAK,CAACM,GAAN,iBAAmBD,QAAnB,EAAP;AACH;;AAED,SAAUhB,UAAV,CAAqBkB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMV,IAAI,CAACO,aAAD,EAAgBG,MAAM,CAACC,IAAvB,CAAV;;AAFvB;AAEcC,UAAAA,MAFd;AAAA;AAGQ,iBAAMX,GAAG,CAAC;AACNY,YAAAA,IAAI,EAAGP,mBADD;AAENK,YAAAA,IAAI,EAAGC;AAFD,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQE,UAAAA,OAAO,CAACC,KAAR;AARR;AASQ,iBAAMd,GAAG,CAAC;AACNY,YAAAA,IAAI,EAAER,mBADA;AAENU,YAAAA,KAAK;AAFC,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUtB,WAAV;AAAA;AAAA;AAAA;AAAA;AACIK,UAAAA,UAAU,CAACM,mBAAD,EAAsBZ,UAAtB,CAAV;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CAAE;AACRC,UAAAA,IAAI,CAACH,WAAD,CADE,CACa;AACnB;AAFM,WAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, delay, takeLatest,takeEvery, call, put, take } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { SEARCH_USER_REQUEST, SEARCH_USER_FAILURE, SEARCH_USER_SUCCESS } from '../reducers/user';\r\n\r\nfunction searchUserAPI(userName){\r\n    return axios.get(`/user/${userName}`);\r\n}\r\n\r\nfunction* searchUser(action) {\r\n    try{\r\n        const result = yield call(searchUserAPI, action.data);\r\n        yield put({\r\n            type : SEARCH_USER_SUCCESS,\r\n            data : result,\r\n        })\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type: SEARCH_USER_FAILURE,\r\n            error : e\r\n        });\r\n    }\r\n}\r\nfunction* watchSearch(){\r\n    takeLatest(SEARCH_USER_REQUEST, searchUser);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([ //call fork는 둘다 함수를 실행해줌. call 동기호출 fork 비동기 호출출\r\n        fork(watchSearch), // 많은 액션들 사이에 순서가 없다. 사용자의 이벤트 클릭에 따라 작동.\r\n        // 순서가 의미가 없으니깐 fork\r\n    ]); // 사용자에 관한 리덕스 액션이 여러개면 all로 묶어서 다 넣어줘야함.\r\n}"]},"metadata":{},"sourceType":"module"}